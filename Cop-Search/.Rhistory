left join dsk8_defendants d on d.case_number=cases.case.number
where complaint_number LIKE \'%602068%\'
/*in (\'6-150602068\',\'150602068\',\'15062068\',\'15602068\')*/
limit 100")
amelia<-dbGetQuery(con, statement ="
select *
from cases
inner join
dsk8 on cases.case_number=dsk8.case_number
left join dsk8_defendants d on d.case_number=cases.case_number
where complaint_number LIKE \'%602068%\'
/*in (\'6-150602068\',\'150602068\',\'15062068\',\'15602068\')*/
limit 100")
View(amelia)
amelia$url
evictions.raw.2<-read.xls(in.evict,skip=3,sheet=2,
perl=perl,
as.is=T)
evictions.raw.2<-read.xls(in.evict,skip=2,sheet=2,
perl=perl,
as.is=T)
evictions.raw.2<-read.xls(in.evict,sheet=2,
perl=perl,
as.is=T)
evictions.raw.2<-read.xls(in.evict,sheet=2,
perl=perl,
as.is=T)
evictions.raw.2<-read.xls(xls=in.evict,sheet=2,
perl=perl,
as.is=T)
source('~/IWW/IWOC/Contacts audit.R', echo=TRUE)
---
# Need to pull a report of all the contacts from hubspot to run this. This will check if folks in MD have been released or changed locations. Requires human attention to check on the ones that may have moved.
```{r setup}
knitr::opts_chunk$set(warning=FALSE)
knitr::opts_chunk$set(echo=FALSE)
knitr::opts_chunk$set(error=FALSE)
knitr::opts_chunk$set(message=FALSE)
knitr::opts_chunk$set(dpi=300)
knitr::opts_chunk$set(cache=F)
source("C:/utilities/R_utilities.R")
required.packages(c("dplyr",
"RCurl",
"rjson",
"httr",
"rvest",
"XML",
"xml2",
"stringr"))
# Maryland Department of Corrections Inmate Lookup
url.base<-"http://www.dpscs.state.md.us/inmate/search.do?searchType=name"
# Contact list from Hubspot
hubspot.export<-"C:/Users/Sam/Documents/IWW/IWOC/hubspot-crm-view-contacts-all-contacts-2018-01-18.csv"
# List of MD Prisons in hubspot
prisons.in<-"C:/Users/Sam/Documents/IWW/IWOC/hubspot-crm-view-companies-all-companies-2018-07-22.csv"
released.q<-function(first,last){
first<-gsub(" ","+",first)
last<-gsub(" ","+",last)
url<-paste0(url.base,"&firstnm=",first,"&lastnm=",last)
thing<-html_text(read_html(url))
return(grepl("No Inmate Found",thing))
}
info.change<-function(first,last,Prison){
url<-paste0("http://www.dpscs.state.md.us/inmate/search.do?searchType=name&firstnm=",first,"&lastnm=",last)
con<-url(url)
line<-readLines(con)[[258]]
# http://www.dpscs.state.md.us/inmate/search.do?searchType=detail&id=7019689
# sub('    \t  \t\t\t<TD align=left><a href=\"search.do?searchType=detail&id=',"",line) %>%
#   sub('\" >BRAXTON, SHAN ANTHONY</a></TD>')
code<-gsub("[^0-9]","",line)
url.2<-paste0("http://www.dpscs.state.md.us/inmate/search.do?searchType=detail&id=",code)
thing.2<-html_text(read_html(url.2))
prison<-word(Prison,2)
return(!grepl(prison,thing.2))
}
```
```{r Read}
contacts<-read.csv(hubspot.export,
strip.white = T)
# Contact list from Hubspot
hubspot.export<-"C:/Users/Sam/Documents/IWW/IWOC/hubspot-crm-view-contacts-all-contacts-2019-01-18.csv"
released.q<-function(first,last){
first<-gsub(" ","+",first)
last<-gsub(" ","+",last)
url<-paste0(url.base,"&firstnm=",first,"&lastnm=",last)
thing<-html_text(read_html(url))
return(grepl("No Inmate Found",thing))
}
info.change<-function(first,last,Prison){
url<-paste0("http://www.dpscs.state.md.us/inmate/search.do?searchType=name&firstnm=",first,"&lastnm=",last)
con<-url(url)
line<-readLines(con)[[258]]
# http://www.dpscs.state.md.us/inmate/search.do?searchType=detail&id=7019689
# sub('    \t  \t\t\t<TD align=left><a href=\"search.do?searchType=detail&id=',"",line) %>%
#   sub('\" >BRAXTON, SHAN ANTHONY</a></TD>')
code<-gsub("[^0-9]","",line)
url.2<-paste0("http://www.dpscs.state.md.us/inmate/search.do?searchType=detail&id=",code)
thing.2<-html_text(read_html(url.2))
prison<-word(Prison,2)
return(!grepl(prison,thing.2))
}
# List of MD Prisons in hubspot
prisons.in<-"C:/Users/Sam/Documents/IWW/IWOC/hubspot-crm-view-companies-all-companies-2018-07-22.csv"
```
```{r Read}
contacts<-read.csv(hubspot.export,
strip.white = T)
prisons<-read.csv(prisons.in,
strip.white = T)
```
```{r clean}
# flag whether in a MD prison
MD.contacts<-mutate(contacts,
MD=Associated.Company %in% prisons$Name)
MD.Contacts.Released<-within(MD.contacts,
{
released<-mapply(released.q,First.Name,Last.Name)
})
MD.Contacts.Released.2<-within(filter(MD.Contacts.Released,!released),
{
info_change<-mapply(info.change,First.Name,Last.Name,Associated.Company)
})
MD.Contacts.Released$info_change<-NA
MD.Contacts.Released.3<-rbind(MD.Contacts.Released.2,filter(MD.Contacts.Released,released))
MD.not.released<-filter(MD.Contacts.Released.3, MD==TRUE & released==FALSE)
```
```{r Data dump}
write.csv(select(MD.Contacts.Released.3,
Contact.ID,
First.Name,
Last.Name,
released,
info_change,
MD,
Associated.Company,
Create.Date,
Last.Modified.Date,
Contact.owner,
Last.Activity.Date,
Owner.Assigned.Date),
"C:/Users/Sam/Documents/IWW/IWOC/MD_Released_20180823.csv",
row.names = F)
```
We have `r nrow(filter(MD.Contacts.Released.3, MD==TRUE & released==FALSE))` contacts in these `r length(unique(filter(MD.Contacts.Released.3, MD==TRUE & released==FALSE)$Associated.Company))` facilities:
```{r}
unique(MD.not.released$Associated.Company)
---
# Need to pull a report of all the contacts from hubspot to run this. This will check if folks in MD have been released or changed locations. Requires human attention to check on the ones that may have moved.
```{r setup}
knitr::opts_chunk$set(warning=FALSE)
knitr::opts_chunk$set(echo=FALSE)
knitr::opts_chunk$set(error=FALSE)
knitr::opts_chunk$set(dpi=300)
knitr::opts_chunk$set(cache=F)
knitr::opts_chunk$set(message=FALSE)
source("C:/utilities/R_utilities.R")
required.packages(c("dplyr",
"RCurl",
"rjson",
"httr",
"rvest",
"XML",
"xml2",
"stringr"))
# Maryland Department of Corrections Inmate Lookup
url.base<-"http://www.dpscs.state.md.us/inmate/search.do?searchType=name"
# Contact list from Hubspot
hubspot.export<-"C:/Users/Sam/Documents/IWW/IWOC/hubspot-crm-view-contacts-all-contacts-2019-01-18.csv"
# List of MD Prisons in hubspot
prisons.in<-"C:/Users/Sam/Documents/IWW/IWOC/hubspot-crm-view-companies-all-companies-2018-07-22.csv"
released.q<-function(first,last){
first<-gsub(" ","+",first)
last<-gsub(" ","+",last)
url<-paste0(url.base,"&firstnm=",first,"&lastnm=",last)
thing<-html_text(read_html(url))
return(grepl("No Inmate Found",thing))
}
info.change<-function(first,last,Prison){
url<-paste0("http://www.dpscs.state.md.us/inmate/search.do?searchType=name&firstnm=",first,"&lastnm=",last)
con<-url(url)
line<-readLines(con)[[258]]
# http://www.dpscs.state.md.us/inmate/search.do?searchType=detail&id=7019689
# sub('    \t  \t\t\t<TD align=left><a href=\"search.do?searchType=detail&id=',"",line) %>%
#   sub('\" >BRAXTON, SHAN ANTHONY</a></TD>')
code<-gsub("[^0-9]","",line)
url.2<-paste0("http://www.dpscs.state.md.us/inmate/search.do?searchType=detail&id=",code)
thing.2<-html_text(read_html(url.2))
prison<-word(Prison,2)
return(!grepl(prison,thing.2))
}
```
```{r Read}
contacts<-read.csv(hubspot.export,
strip.white = T)
prisons<-read.csv(prisons.in,
strip.white = T)
```
```{r clean}
# flag whether in a MD prison
MD.contacts<-mutate(contacts,
MD=Associated.Company %in% prisons$Name)
MD.Contacts.Released<-within(MD.contacts,
{
released<-mapply(released.q,First.Name,Last.Name)
})
MD.Contacts.Released.2<-within(filter(MD.Contacts.Released,!released),
{
info_change<-mapply(info.change,First.Name,Last.Name,Associated.Company)
})
MD.Contacts.Released$info_change<-NA
MD.Contacts.Released.3<-rbind(MD.Contacts.Released.2,filter(MD.Contacts.Released,released))
MD.not.released<-filter(MD.Contacts.Released.3, MD==TRUE & released==FALSE)
```
```{r Data dump}
write.csv(select(MD.Contacts.Released.3,
Contact.ID,
First.Name,
Last.Name,
released,
info_change,
MD,
Associated.Company,
Create.Date,
Last.Modified.Date,
Contact.owner,
Last.Activity.Date,
Owner.Assigned.Date),
"C:/Users/Sam/Documents/IWW/IWOC/MD_Released_20180823.csv",
row.names = F)
```
all.prisons.in <- "C:/Users/Sam/Documents/IWW/IWOC/hubspot-crm-view-companies-all-companies-2019-01-18.csv"
all.prisons<-read.csv(all.prisons.in,
strip.white = T)
all.prisons$Name<-toupper(all.prisons$Name)
contacts$Company.Name <- toupper(contacts$Company.Name)
addresses<-left_join(select(contacts,First.Name,Last.Name,Message,Prison=Company.Name),select(all.prisons,Prison=Name,Street.Address,City,State,Postal.Code))
addresses<-left_join(select(contacts,First.Name,Last.Name,Message,Prison=Company.Name),select(all.prisons,Prison=Name,Street.Address,City,State.Region,Postal.Code))
View(addresses)
addresses<-left_join(select(contacts,First.Name,Last.Name,Message,Prison=Company.Name),select(all.prisons,Company.ID,Prison=Name,Street.Address,City,State.Region,Postal.Code))
contacts<-read.csv(hubspot.export,
strip.white = T)
contacts$Company.Name <- toupper(contacts$Company.Name) %>% gsub("CENTER$","",.)
prisons<-read.csv(prisons.in,
strip.white = T)
all.prisons<-read.csv(all.prisons.in,
strip.white = T)
all.prisons$Name<-toupper(all.prisons$Name)%>% gsub("CENTER$","",.)
addresses<-left_join(select(contacts,First.Name,Last.Name,Message,Prison=Company.Name),select(all.prisons,Company.ID,Prison=Name,Street.Address,City,State.Region,Postal.Code))
View(all.prisons)
contacts<-read.csv(hubspot.export,
strip.white = T)
contacts$Company.Name <- toupper(contacts$Company.Name) %>% gsub(" CENTER$","",.)
prisons<-read.csv(prisons.in,
strip.white = T)
all.prisons<-read.csv(all.prisons.in,
strip.white = T)
all.prisons$Name<-toupper(all.prisons$Name)%>% gsub(" CENTER$","",.)
addresses<-left_join(select(contacts,First.Name,Last.Name,Message,Prison=Company.Name),select(all.prisons,Company.ID,Prison=Name,Street.Address,City,State.Region,Postal.Code))
contacts<-read.csv(hubspot.export,
strip.white = T)
contacts$Company.Name <- toupper(contacts$Company.Name) %>% gsub(" CENTER$","",.) %>% gsub(" INSTITUTE$","",.)
prisons<-read.csv(prisons.in,
strip.white = T)
all.prisons<-read.csv(all.prisons.in,
strip.white = T)
all.prisons$Name<-toupper(all.prisons$Name)%>% gsub(" CENTER$","",.)%>% gsub(" INSTITUTE$","",.)
addresses<-left_join(select(contacts,First.Name,Last.Name,Message,Prison=Company.Name),select(all.prisons,Company.ID,Prison=Name,Street.Address,City,State.Region,Postal.Code))
View(contacts)
addresses<-left_join(select(contacts,First.Name,Last.Name,Message,Associated.Company.ID),select(all.prisons,Associated.Company.ID=Company.ID,Street.Address,City,State.Region,Postal.Code))
write.csv(addresses,"C:/Users/Sam/Documents/IWW/IWOC/addresses",today(),".csv")
write.csv(addresses,paste0("C:/Users/Sam/Documents/IWW/IWOC/addresses",today(),".csv"))
library(lubridate)
write.csv(addresses,paste0("C:/Users/Sam/Documents/IWW/IWOC/addresses",today(),".csv"))
paste(addresses[1,], collapse = "\n")
paste(addresses[2,], collapse = "\n")
paste(addresses[2,names(addresses)], collapse = "\n")
addresses<-left_join(select(contacts,First.Name,Last.Name,Message,Associated.Company.ID),select(all.prisons,Name,Associated.Company.ID=Company.ID,Street.Address,City,State.Region,Postal.Code))
write.csv(addresses,paste0("C:/Users/Sam/Documents/IWW/IWOC/addresses",today(),".csv"))
multiline<-function(n){paste(addresses$First.Name[[n]]," ",addresses$Last.Name[[n]],"\n",addresses$Message[[n]],"\n",addresses$Name[[n]],"\n",addresses$Street.Address[[n]],"\n",addresses$City[[n]],", ",addresses$State.Region[[n]]," ",addresses$Postal.Code[[n]])
}
lapply(1:length(addresses), multiline)
multiline<-function(n){paste0(addresses$First.Name[[n]]," ",addresses$Last.Name[[n]],"\n",addresses$Message[[n]],"\n",addresses$Name[[n]],"\n",addresses$Street.Address[[n]],"\n",addresses$City[[n]],", ",addresses$State.Region[[n]]," ",addresses$Postal.Code[[n]])
}
lapply(1:length(addresses), multiline)
cat(lapply(1:length(addresses), multiline))
multiline<-function(n){cat(paste0(addresses$First.Name[[n]]," ",addresses$Last.Name[[n]],"\n",addresses$Message[[n]],"\n",addresses$Name[[n]],"\n",addresses$Street.Address[[n]],"\n",addresses$City[[n]],", ",addresses$State.Region[[n]]," ",addresses$Postal.Code[[n]]))
}
lapply(1:length(addresses), multiline)
multiline<-function(n){cat(paste0(addresses$First.Name[n]," ",addresses$Last.Name[n],"\n",addresses$Message[n],"\n",addresses$Name[n],"\n",addresses$Street.Address[n],"\n",addresses$City[n],", ",addresses$State.Region[n]," ",addresses$Postal.Code[n]))
}
lapply(1:length(addresses), multiline)
multiline<-function(n){cat(paste0(addresses$First.Name[n]," ",addresses$Last.Name[n],"\n",addresses$Message[n],"\n",addresses$Name[n],"\n",addresses$Street.Address[n],"\n",addresses$City[n],", ",addresses$State.Region[n]," ",addresses$Postal.Code[n],"\n\n"))
}
lapply(1:nrow(addresses), multiline)
addies<-lapply(1:nrow(addresses), multiline)
write(addies,"C:/Users/Sam/Documents/IWW/IWOC/addresses",today(),".txt")
write(addies,paste0("C:/Users/Sam/Documents/IWW/IWOC/addresses",today(),".txt"))
addies<-unlist(lapply(1:nrow(addresses), multiline))
write(addies,paste0("C:/Users/Sam/Documents/IWW/IWOC/addresses",today(),".txt"))
multiline<-function(n){paste0(addresses$First.Name[n]," ",addresses$Last.Name[n],"\n",addresses$Message[n],"\n",addresses$Name[n],"\n",addresses$Street.Address[n],"\n",addresses$City[n],", ",addresses$State.Region[n]," ",addresses$Postal.Code[n],"\n\n")
}
addies<-unlist(lapply(1:nrow(addresses), multiline))
write(addies,paste0("C:/Users/Sam/Documents/IWW/IWOC/addresses",today(),".txt"))
source("C:/Bmore City/Bmore code/R_utilities.R")
required.packages(c("rgdal",
"ggplot2",
"plyr",
"dplyr",
"RSelenium",
"docker",
"httr",
"rvest",
"beepr",
"stringr"))
# parcels<-read_sf("C:/Bmore City/Shapefiles/BACI Parcels/BACI.shp")
# res<-parcels %>%
#   filter(DESCLU %in% c("Apartments",
#                        "Commercial Condominium",
#                        "Commercial Residential",
#                        "Residential",
#                        "Residential Commercial",
#                        "Residential Condominium"))
# well<-inner_join(mutate(cleaned.coded, ADDRESS=word(ADDRESS,2)),mutate(res, ADDRESS=word(ADDRESS,2)))
search.owner<-mutate(cleaned.coded, ADDRESS=sub(" Baltimore MD","",ADDRESS) %>%
sub(" AVE .*$"," AVE",.) %>%
sub(" RD .*$"," RD",.) %>%
sub(" BLVD .*$"," RD",.))
cleaned.coded <- read.csv("C:/Bmore City/Eviction Defense/Outputs/coded_evictions_2017.csv",
stringsAsFactors = FALSE,
strip.white = TRUE)
search.owner<-mutate(cleaned.coded, ADDRESS=sub(" Baltimore MD","",ADDRESS) %>%
sub(" AVE .*$"," AVE",.) %>%
sub(" RD .*$"," RD",.) %>%
sub(" BLVD .*$"," RD",.))
search.owner$ADDRESS <- ifelse(grepl(" ST .* ST ",search.owner$ADDRESS),
regmatches(search.owner$ADDRESS,regexpr("^.*ST[^(ST)]*", search.owner$ADDRESS, perl=TRUE)),
search.owner$ADDRESS)
filter(search.owner, grepl(" ST .* ST ",ADDRESS))$ADDRESS
search.owner$ADDRESS <- ifelse(grepl(" ST .* ST ",search.owner$ADDRESS),
regmatches(search.owner$ADDRESS,regexpr("^.*ST[^(ST)]{,}", search.owner$ADDRESS, perl=TRUE)),
search.owner$ADDRESS)
filter(search.owner, grepl(" ST .* ST ",ADDRESS))$ADDRESS
filter(search.owner, grepl(" ST .*",ADDRESS))$ADDRESS
filter(search.owner, grepl(" ST PAUL",ADDRESS))$ADDRESS
filter(search.owner, grepl(" ST PAUL ST",ADDRESS))$ADDRESS
filter(search.owner, grepl(" ST PAUL ST ",ADDRESS))$ADDRESS
cleaned.coded <- read.csv("C:/Bmore City/Eviction Defense/Outputs/coded_evictions_2017.csv",
stringsAsFactors = FALSE,
strip.white = TRUE)
search.owner<-mutate(cleaned.coded, ADDRESS=sub(" Baltimore MD","",ADDRESS) %>%
sub(" AVE .*$"," AVE",.) %>%
sub(" RD .*$"," RD",.) %>%
sub(" BLVD .*$"," RD",.))
filter(search.owner, grepl(" ST PAUL ST ",ADDRESS))$ADDRESS
search.owner$ADDRESS <- ifelse(grepl(" ST .* ST ",search.owner$ADDRESS),
regmatches(search.owner$ADDRESS,regexpr("^.*ST[^(ST)]{,}", search.owner$ADDRESS, perl=TRUE)),
search.owner$ADDRESS)
filter(search.owner, grepl(" ST PAUL ST ",ADDRESS))$ADDRESS
search.owner$ADDRESS <- ifelse(grepl(" ST .* ST ",search.owner$ADDRESS),
regmatches(search.owner$ADDRESS,regexpr("^.*ST[^(ST)]{,}", search.owner$ADDRESS, perl=TRUE)),
sub(" ST .*$"," ST",search.owner$ADDRESS))
cleaned.coded <- read.csv("C:/Bmore City/Eviction Defense/Outputs/coded_evictions_2017.csv",
stringsAsFactors = FALSE,
strip.white = TRUE)
search.owner<-mutate(cleaned.coded, ADDRESS=sub(" Baltimore MD","",ADDRESS) %>%
sub(" AVE .*$"," AVE",.) %>%
sub(" RD .*$"," RD",.) %>%
sub(" BLVD .*$"," RD",.))
search.owner$ADDRESS <- ifelse(grepl(" ST .* ST ",search.owner$ADDRESS),
regmatches(search.owner$ADDRESS,regexpr("^.*ST[^(ST)]{,}", search.owner$ADDRESS, perl=TRUE)),
sub(" ST .*$"," ST",search.owner$ADDRESS))
library(tidyverse)
require("lubridate")
# install.packages("DBI")
# install.packages("RPostgreSQL")
require("DBI")
require("RPostgreSQL")
# create an PostgreSQL instance and create one connection.
drv <- dbDriver("PostgreSQL")
# open the connection using user, passsword, etc., as
con <- dbConnect(drv, dbname = "mjcs",
user="mjcs_ro",
password="0lhYmYO0POg2QaZ6gQgWJNZi7DNXgUKa",
port=5432,
host="mjcs.c7q0zmxhx4uo.us-east-1.rds.amazonaws.com")
dbGetQuery(con,'SELECT *
FROM dsk8_related_persons
WHERE connection =\'POLICE OFFICER\')
LIMIT 10')
dbGetQuery(con,'SELECT *
FROM dsk8_related_persons
WHERE connection =\'POLICE OFFICER\'
LIMIT 10')
dbGetQuery(con,'SELECT *
FROM dsk8_related_persons
WHERE connection =\'POLICE OFFICER\'
and name LIKE \'KOWLAC\'
LIMIT 10')
dbGetQuery(con,'SELECT *
FROM dsk8_related_persons
WHERE connection =\'POLICE OFFICER\'
and name LIKE \'KOWALC\'
LIMIT 10')
dbGetQuery(con,'SELECT *
FROM dsk8_related_persons
WHERE connection =\'POLICE OFFICER\'
and name LIKE \'%KOWALC%\'
LIMIT 10')
dbGetQuery(con,'SELECT *
FROM dscr_related_persons
WHERE connection =\'POLICE OFFICER\'
and name LIKE \'%KOWALC%\'
LIMIT 10')
dbGetQuery(con,'SELECT *
FROM dscr_related_persons
WHERE connection =\'POLICE OFFICER\'
LIMIT 10')
dbGetQuery(con,'SELECT distinct connection
FROM dscr_related_persons
LIMIT 10')
dbGetQuery(con,'SELECT *
FROM dscr_related_persons
WHERE connection LIKE \'POLICE OFFICER\'
and name LIKE \'%KOWALC%\'
LIMIT 10')
dbGetQuery(con,'SELECT *
FROM dscr_related_persons
WHERE connection LIKE \'%POLICE OFFICER%\'
and name LIKE \'%KOWALC%\'
LIMIT 10')
qry <- paste('SELECT *
FROM dscr_related_persons
WHERE connection LIKE \'%POLICE OFFICER%\'
and name LIKE \'%','KOWALC','%\'
LIMIT 10')
dbGetQuery(con,qry)
qry
qry <- paste('SELECT * FROM dscr_related_persons WHERE connection LIKE \'%POLICE OFFICER%\' and name LIKE \'%','KOWALC','%\' LIMIT 10')
dbGetQuery(con,qry)
qry <- paste('SELECT * FROM dscr_related_persons WHERE connection LIKE \'%POLICE OFFICER%\' and name LIKE \'%','KOWALC','%\' LIMIT 10')
qry
qry <- paste('SELECT * FROM dscr_related_persons WHERE connection LIKE '%POLICE OFFICER%' and name LIKE '%','KOWALC','%' LIMIT 10')
qry <- paste('SELECT * FROM dscr_related_persons WHERE connection LIKE \'%POLICE OFFICER%\' and name LIKE \'%','KOWALC','%\' LIMIT 10')
qry
qry <- paste0('SELECT * FROM dscr_related_persons WHERE connection LIKE \'%POLICE OFFICER%\' and name LIKE \'%','KOWALC','%\' LIMIT 10')
qry
dbGetQuery(con,qry)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Officer Search"),
# Sidebar with a slider input for number of bins
sidebarLayout(
# sidebarPanel(
#    radioButtons("searchtype",
#                "Search Type:"
#                ),
# choices=c("Name","Sequence Number")
# ),
sidebarPanel(
textInput("fname",
"First Name:"
),
textInput("lname",
"Last Name:"
)
),
# Show a plot of the generated distribution
mainPanel(
textOutput("results")
)
)
)
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
RPostgreSQL::dbDisconnect()
gc()
runApp('C:/OJB/Cop-Search')
dbDisconnect(con)
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
dbDisconnect(con)
runApp('C:/OJB/Cop-Search')
dbDisconnect(con)
gc()
runApp('C:/OJB/Cop-Search')
rm(con)
gc()
runApp('C:/OJB/Cop-Search')
rm(drv)
rm(con)
gc()
runApp('C:/OJB/Cop-Search')
runApp('C:/OJB/Cop-Search')
